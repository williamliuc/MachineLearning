#在python中使用matplotlib注解绘制树形图
import matplotlib.pyplot as plt  

#定义文本框和箭头格式 
decisionNode=dict(boxstyle="sawtooth",fc="0.8") 
leafNode=dict(boxstyle="round4",fc="0.8")
arrow_args=dict(arrowstyle="<-")

#绘制带箭头的注解
def plotNode(nodeTxt,centerPt,parentPt,nodeType):
	createPlot.ax1.annotate(nodeTxt,xy=parentPt,xycoords='axes fraction',xytext=centerPt,\
		textcoords='axes fraction',va="center",ha="center",bbox=nodeType,arrowprops=arrow_args)

#生成画板，在画板上画树
def createPlot():
	fig=plt.figure(1,facecolor='white')#figure第一个参数为图像框标题，第二个参数是背景颜色
	fig.clf()
	axprops=dict(xticks=[],yticks=[])
	createPlot.ax1=plt.subplot(111,frameon=False,**axprops)
	plotTree.totalW=float(getNumLeafs(inTree))#注意这种写法，可以使得plotTree函数中也可以使用totalW参数
	plotTree.totalD=float(getTreeDepth(inTree))
	plotTree.xOff=-0.5/plotTree.totalW;plotTree.yOff=1.0;
	plotTree(inTree,(0.5,1.0),'')
	plt.show()

#在父子节点间加文本信息
def plotMidText(cntrPt,parentPt,txtString):
	xMid=(parentPt[0]-cntrPt[0])/2.0+cntrPt[0]
	yMid=(parentPt[1]-cntrPt[1])/2.0+cntrPt[1]
	createPlot.ax1.text(xMid,yMid,txtString)

#递归画树
def plotTree(myTree,parentPt,nodeTxt):
	numLeafs=getNumLeafs(myTree)
	depth=getTreeDepth(myTree)
	firstStr=list(myTree.keys())[0]
	cntrPt=(plotTree.xOff+(1.0+float(numLeafs))/2.0/plotTree.totalW,plotTree.yOff)
	plotMidText(cntrPt,parentPt,nodeTxt)
	plotNode(firstStr,cntrPt,parentPt,decisionNode)
	secondDict=myTree[firstStr]
	plotTree.yOff=plotTree.yOff-1.0/plotTree.totalD
	for key in secondDict.keys():
		if type(secondDict[key]).__name__=='dict':
			plotTree(secondDict[key],cntrPt,str(key))
		else:
			plotTree.xOff=plotTree.xOff+1.0/plotTree.totalW
			plotNode(secondDict[key],(plotTree.xOff,plotTree.yOff),cntrPt,leafNode)
			plotMidText((plotTree.xOff,plotTree.yOff),cntrPt,str(key))
	plotTree.yOff=plotTree.yOff+1.0/plotTree.totalD

#根据叶子节点的个数获取树的宽度
def getNumLeafs(myTree):
	numLeafs=0
	firstStr=list(myTree.keys())[0]
	secondDict=myTree[firstStr]
	for key in secondDict.keys():
		if type(secondDict[key]).__name__=='dict':
			numLeafs+=getNumLeafs(secondDict[key])
		else:	numLeafs+=1
	return numLeafs

#获取树的深度
def getTreeDepth(myTree):
	maxDepth=0
	firstStr=list(myTree.keys())[0]
	secondDict=myTree[firstStr]
	for key in secondDict.keys():
		if type(secondDict[key]).__name__=='dict':
			thisDepth=1+getTreeDepth(secondDict[key])
		else:	thisDepth=1
		if thisDepth>maxDepth:maxDepth=thisDepth
	return maxDepth

def retrieveTree(i):
	listOfTrees=[{'no surfacing':{0:'no',1:{'flippers':{0:'no',1:'yes'}},3:'maybe'}},{'no surfacing':\
	{0:{'head':{0:'no',1:'yes'}},1:'no'}}]
	return listOfTrees[i]

if __name__=="__main__":
	#createPlot()
	myTree=retrieveTree(0)
	print(myTree)
	x=getNumLeafs(myTree)
	y=getTreeDepth(myTree)
	createPlot(myTree)
